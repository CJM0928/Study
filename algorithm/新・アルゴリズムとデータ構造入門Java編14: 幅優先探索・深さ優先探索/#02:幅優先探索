//입력 치
// 배열개수   간선개수   시작점
//   5         4        1
// 1 2
// 1 3
// 2 4
// 2 5

// 출력 치
// 頂点 1 を探索
// 頂点 2 を探索
// 頂点 3 を探索
// 頂点 4 を探索
// 頂点 5 を探索

import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Queue;
import java.util.ArrayDeque;

public class Main {

    static void printVertex(int v) {
        System.out.println("頂点 " + (v + 1) + " を探索");
    }

    static void bfs(int n, List<List<Integer>> g, int s) {
        // 空のキュー q を用意
        Queue<Integer> q = new ArrayDeque<>();
        // 最初の頂点 s をキューに追加
        q.add(s);
        // 訪問済みかどうかを表す配列 visited を用意
        boolean[] visited = new boolean[n];
        // 最初の頂点 s を訪問済みにする
        visited[s] = true;
        
        // キューが空になるまで
        while(!q.isEmpty()){
            // キューから頂点 v を取り出す
            int v = q.poll();
            // 頂点 v を探索
            printVertex(v);
            // 隣接する頂点 u を順に見る
            for(int u : g.get(v)){
                // もし頂点 u が未訪問であれば
                if(!visited[u]){
                    // 頂点 u を訪問済みにして
                    visited[u] = true;
                    // 頂点 u をキューに追加
                    q.add(u);
                }
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt(),       // 5
        m = sc.nextInt(),           // 4
        s = sc.nextInt() - 1;       // 1 -> 0
        
        List<List<Integer>> graph = new ArrayList<List<Integer>>(n);

        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<Integer>());
        }

        for (int i = 0; i < m; i++) {
            int a = sc.nextInt() - 1,       // 1,1,2,2
            b = sc.nextInt() - 1;           // 2,3,4,5
            
            graph.get(a).add(b);
            graph.get(b).add(a);
        }

        bfs(n, graph, s);

        sc.close();
    }
}
