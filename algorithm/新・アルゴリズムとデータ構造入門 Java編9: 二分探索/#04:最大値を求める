import java.util.Scanner;

        // 이 코드는 이분 탐색(Binary Search) 을 활용하여 문제를 푸는 전형적인 패턴 중 하나
        // “최대 몇 cm짜리로 자르면 k개 이상 나올까?” 를 묻는 것이고,
        // 이분 탐색을 통해 그 가능한 최대 길이를 찾아내는 것이 목표

        // 같은 길이로 잘랐을 때 얼마나 많은 조각을 만들 수 있는지
       
        // n	막대의 개수	            3	           총 몇 개의 막대가 있는지를 나타냅니다.
        // k	필요한 조각 개수	      7	           원하는 최소 조각 수입니다. 즉, 최소 k개 이상으로 잘라야 합니다.
        // a[] 각 막대의 길이 배열	    8, 5, 8	     각각의 막대의 길이를 나타냅니다. 길이가 다른 n개의 막대가 주어집니다.

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt(), k = sc.nextInt();

        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }

        // 変数 left, right をそれぞれ 0 と 10001 で初期化
        double left = 0, right = 10001;

        // 50 回繰り返すループを作成
        // double형에 알맞는 최대반복수 (50회)
        for(int loops = 0; loops < 50; loops++){
            // 変数 mid に (left + right) / 2 を代入
            double mid = (left + right) / 2;
            
            // 切り出せる本数を表す変数 num を 0 で初期化
            int num = 0; 
            
            // i を 0 から n - 1 まで繰り返す
            for(int i = 0; i< n; i++){
                
                // num に a[i] / mid の整数部分を足す
                // 하나의 봉(a[i])을 mid 길이로 잘랐을 때 나오는 조각의 수를 계산
                num += (int) (a[i] / mid);
                
                // もし num が k 以上なら
                if(num >= k){
                    
                    // left を mid で更新
                    left = mid;
                    
                // そうでなければ
                } else {
                    
                    // right を mid で更新
                    right = mid;
                }
            }
        }
        
        // left を出力
        System.out.println(left);
    }
}
