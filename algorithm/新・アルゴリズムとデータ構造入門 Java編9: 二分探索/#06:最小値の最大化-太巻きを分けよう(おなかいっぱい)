// 整数 l, n, k と長さ k の配列 a が与えられるので、各 i について左端から a[i] cm のところに切れ目の
// 入った長さ l cm の太巻きを切れ目に沿って n 個に切り分けるとき、分けられた太巻きのうち最も長い太巻きの長さの最小値を求めてください。
// すでに入力を行うコードが実装されているので、コードを書き足して完成させてください。

// 입력 값
// 5 3 4
// 1 2 3 4

// 출력 값
// 2

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // l: 김밥 전체 길이, n: 잘라낸 조각을 최대 몇 개까지 허용할지, k: 표시된 자를 수 있는 위치 개수
        int l = sc.nextInt(), n = sc.nextInt(), k = sc.nextInt();

         // 자를 수 있는 위치를 담을 배열 (마지막에 끝점과 안전용 추가)
        int[] a = new int[k + 2];
        for (int i = 0; i < k; i++) {
            a[i] = sc.nextInt();          // 표시된 자를 수 있는 위치 입력
        }

        a[k] = l;                         // 김밥 끝 위치 추가
        a[k + 1] = 2000000001;            // 매우 큰 값 추가하여 경계 처리 간소화

        // left: n조각으로 자를 수 없는 최대 길이, right: n조각 이하로 자를 수 있는 최소 길이
        int left = 0, right = l + 1;

        // left 초기값 설정: 인접 표시 사이 거리가 너무 짧으면 절대 n개 못 자름
        for (int i = 0; i < k; i++) {
            left = Math.max(left, a[i + 1] - a[i] - 1);
        }

        // right−left가 1이 될 때까지 이분 탐색
        while (right - left != 1) {
            int mid = (left + right) / 2;      // 시도할 조각 최대 길이

            int last = 0, count = 0;           // last : 마지막으로 자른 지점, count : 잘려 나온 조각 수

            // 각 표시점 사이를 보면서 mid를 넘으면 자르기
            for (int i = 0; i <= k; i++) {
                if (a[i + 1] - last > mid) {

                    // a[i] 위치에서 잘라야 함
                    last = a[i];
                    count++;
                }
            }

            // 잘라낸 조각 수가 n 이하이면 mid 길이로도 충분히 자를 수 있음
            if (count <= n) {
                right = mid;      // 최대 조각 길이를 더 줄여 본다
            } else {
                left = mid;       // mid가 너무 작아 조각 수 초과 → 늘려야 함
            }
        }

        // right가 “최대 조각 길이의 최소값”이므로 출력
        System.out.println(right);
    }
}
