  // 整数 n, m, k と長さ n の配列 a, 長さ m の配列 b が与えられるので、 
  // 各 i, j に対して a[i] - b[j] で表される合計 n × m 個の整数のうち、小さい方から k 番目の値を求めてください。
  // すでに入力を行うコードと関数 lowerBound, upperBound が実装されているので、コードを書き足して完成させてください。

  // 二分探索を行う。left の初期値は負の大きい値にする必要があることに注意する。
  // 各要素 a[i] に対して upperBound(b, m, a[i] + mid) を足し合わせた値が k 以上かどうかで判定する。

  // 입력 값
  // 5
  // 1 2 3 4 5
  // 3
  // 1 2 3
  // 3

  // 출력 값
  // -3
import java.util.Scanner;
import java.util.Arrays;

public class Main {
    static int lowerBound(int[] a, int n, int x) {

        int left = 0, right = n;

        while (left != right) {
            int mid = (left + right) / 2;

            if (a[mid] >= x) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }

        return left;
    }

    static int upperBound(int[] a, int n, int y) {

        int left = 0, right = n;

        while (left != right) {
            int mid = (left + right) / 2;

            if (a[mid] > y) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }

        return left;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }

        int m = sc.nextInt();

        int[] b = new int[m];
        for (int i = 0; i < m; i++) {
            b[i] = sc.nextInt();
        }

        int k = sc.nextInt();

        Arrays.sort(b);

        int left = -2000000000, right = 2000000000;

        while (right - left != 1) {
            int mid = (left + right) / 2;

            int count = 0;
            for (int i = 0; i < n; i++) {
                count += upperBound(b, m, a[i] + mid);
            }

            if (count >= k) {
                right = mid;
            } else {
                left = mid;
            }
        }

        System.out.println(right);
    }
}
