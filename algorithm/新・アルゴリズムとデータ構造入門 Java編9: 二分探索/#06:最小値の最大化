import java.util.Scanner;

public class Main {

    // 입력 값
    // 10 3 3
    // 1 3 8

    // 출력 값
    // 2

    // 길이가 l인 후토마키가 있다.
    // 길이를 n번 a[i] 만큼 자르면
    // 몇번 자를수있는지
    // 최소값들중에서 최대값을 구하기

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int l = sc.nextInt(),               // 전체 길이
            n = sc.nextInt(),               // 얻고 싶은 조각 개수
            k = sc.nextInt();               // 주어진 자르기 가능 위치 개수


        int[] a = new int[k+1]; // 配列 a のサイズを k + 1 に修正
        for (int i = 0; i < k; i++) {
            a[i] = sc.nextInt();            // 자를 수 있는 위치
        }

        // 配列の末尾に l を追加
        a[k] = l;                           // 맨 끝 위치도 추가

        // 変数 left, right をそれぞれ 0 と l + 1 で初期化
        int left = 0, right = l + 1;

        // left と right の差が 1 でない間
        while(right - left != 1){
            
            // 変数 mid に (left + right) / 2 を代入
            int mid = (left + right) / 2;        // 후보 최소 조각 길이
            
            // 前回の切れ目の位置を表す変数 last と切り分けた個数を表す変数 count を 0 で初期化
            int last = 0, count = 0;
            
            // i を 0 から k まで繰り返す
            for(int i=0; i<=k; i++){
                // もし a[i] - last が mid 以上なら
                if(a[i] - last >= mid){
                    // last に a[i] を代入し、count を 1 増やす
                    last = a[i];
                    count++;
                }                
            }
            
            // もし count が n 以上なら
            if(count >= n){
                
                // left を mid で更新
                left = mid;
                
                // そうでなければ
            } else {
                
                // right を mid で更新
                right = mid;
            }
        }

        // left を出力
        System.out.println(left);
    }
}
