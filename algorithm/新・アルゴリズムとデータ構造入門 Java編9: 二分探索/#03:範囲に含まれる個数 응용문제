import java.util.Scanner;
import java.util.Arrays;

public class Main {
    
    // lowerBound(a, 3)
    // x = 3
    // → 3 이상인 첫 위치는 a[2]
    // → 반환값 = 2
    // → 즉, a[0], a[1] → 2개 → 3보다 작은 값의 개수
    
    // upperBound(a, 3)
    // x = 3
    // → 3 초과인 첫 위치는 a[3]
    // → 반환값 = 3
    // → 즉, a[0], a[1], a[2] → 3개 → 3 이하인 값의 개수
    
    // lowerBound: x 이상이 처음 나오는 인덱스를 반환
    // (즉, x 이상인 값의 시작 위치)
    // x 이상인 값이 처음 나오는 위치	= x 보다 작은 값의 개수	a[i] < x인 개수 구할 때
    static int lowerBound(int[] a, int n, int x) {
        int left = 0, right = n;
        while (left < right) {
            int mid = (left + right) / 2;
            if (a[mid] < x) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        // a[left] ≥ x 를 처음 만족하는 위치
        return left;        
    }
    
    // upperBound: x 초과가 처음 나오는 인덱스를 반환
    // (즉, x 이하인 값의 마지막 위치 다음)
    // x 초과인 값이 처음 나오는 위치	= x 이하인 값의 개수	a[i] ≤ x인 개수 구할 때
    static int upperBound(int[] a, int n, int x) {
        int left = 0, right = n;
        while (left < right) {
            int mid = (left + right) / 2;
            if (a[mid] <= x) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        // a[left] > x 를 처음 만족하는 위치
        return left;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }

        Arrays.sort(a);

        int q = sc.nextInt();

        int[] l = new int[q], r = new int[q];
        for (int i = 0; i < q; i++) {
            l[i] = sc.nextInt();        // 1 2 3    이하 조건 (l[i] 이하인 값 개수 구함)
            r[i] = sc.nextInt();        // 5 4 4    이상 조건 (r[i] 이상인 값 개수 구함)
            
            // l[i] 이하인 값의 개수: upperBound(l[i])
            int leftCount = upperBound(a, n, l[i]);          // a[] ≤ l[i]
            
            // r[i] 이상인 값의 개수: n - lowerBound(r[i])
            int rightCount = n - lowerBound(a, n, r[i]);     // a[] ≥ r[i]
            
            // 둘 다 포함하는 값의 개수 합산
            System.out.println(leftCount + rightCount);
        }
    }
}
