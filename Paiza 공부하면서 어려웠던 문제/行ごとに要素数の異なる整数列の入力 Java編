import java.util.*;

// 1 行目に整数 N が与えられます。
// 2 行目から (N + 1) 行目までの先頭に整数 M_i (1 ≦ i ≦ N) が与えられます。それに続いて M_i 個の整数 a_1, ..., a_{M_i} が与えられます。
// 上から i 番目、左から j 番目の整数は a_{i,j} です。
// N 行の a_1, ..., a_M をそのまま出力してください。

// 1 行目で整数 N が与えられます。
// 2 行目以降で N 行 M_i + 1 列の行列が与えられます。
// 以下の形式で標準入力によって与えられます。


// N
// M_1 a_{1,1} ... a_{1,M_1}
// ...         ...
// M_N a_{N,1} ... a_{N,M_N}

// 入力値最終行の末尾に改行が１つ入ります。
// 文字列は標準入力から渡されます。

// N 行 M_i 列の行列をそのまま出力してください。
// また、末尾に改行を入れ、余計な文字、空行を含んではいけません。

// a_{1,1} ... a_{1,M_1}
// ...          ...
// a_{N,1} ... a_{N,M_N}

// すべてのテストケースにおいて、以下の条件をみたします。

// ・N, M_i は 1 以上 100 以下の整数
// ・a_{i,j} は 1 以上 100 以下の整数 (1 ≦ i ≦ N, 1 ≦ j ≦ M)

// 입력 값
// 3
// 1 8
// 2 8 1
// 3 8 1 3

// 출력 값
// 8
// 8 1
// 8 1 3

public class Main {
    public static void main(String[] args) {
        // 自分の得意な言語で
        // Let's チャレンジ！！
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();  
        sc.nextLine();                              //nextInt메서드를 수행했으면 개행 필수
        
        // N개의 줄을 반복 처리
        for (int i = 0; i < n; i++) {
            // 한 줄을 통째로 읽어서 공백 기준으로 split → 배열로 저장
            String[] str = sc.nextLine().split(" ");

            // 첫 번째 값은 현재 줄에 포함된 숫자의 개수 M
            int m = Integer.parseInt(str[0]);

            // 1부터 m까지의 숫자들을 출력
            for (int j = 1; j <= m; j++) {
                System.out.print(str[j]);  // 정수값 출력
                if (j < m) {
                    System.out.print(" ");  // 마지막 값이 아니라면 공백 출력
                }
            }
            System.out.println();  // 한 줄 출력 후 줄바꿈
        }
    }
    }
}
